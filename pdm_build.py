# SPDX-License-Identifier: MIT

from typing import TYPE_CHECKING, Dict, Literal, NamedTuple

import packaging.version

if TYPE_CHECKING:
    from pdm.backend.hooks.base import Context  # type: ignore

VERSION_FILE_TEMPLATE = """
# SPDX-License-Identifier: MIT
# this file is automatically generated by pdm-backend
# do not manually edit or commit to version control

from typing import Literal, NamedTuple

class VersionInfo(NamedTuple):
    major: int
    minor: int
    micro: int
    releaselevel: Literal["alpha", "beta", "candidate", "final"]
    serial: int

version_info: VersionInfo = {version_tuple}

__version__ = "{version_string}"
"""


def pdm_build_initialize(context: "Context"):
    metadata = context.config.metadata
    metadata["optional-dependencies"]["discord"] = ["discord-disnake"]


def pdm_build_update_files(context: "Context", files: Dict[str, str]) -> None:
    version_string = context.config.metadata["version"]
    if version_string.endswith(".editable"):
        version_string = version_string[:-9]

    class VersionInfo(NamedTuple):
        major: int
        minor: int
        micro: int
        releaselevel: Literal["alpha", "beta", "candidate", "final"]
        serial: int

    abbrevs_to_levels: Dict[str, Literal["alpha", "beta", "candidate"]] = {
        "a": "alpha",
        "b": "beta",
        "c": "candidate",
    }

    version_info = packaging.version.parse(version_string)
    pre_release = version_info.pre
    serial = version_info.dev
    if pre_release:
        release_level = abbrevs_to_levels.get(pre_release[0]) or "final"
        serial = serial or pre_release[1]
    elif serial:
        release_level = "alpha"
    else:
        release_level = "final"
        serial = 0

    version = str(version_info)

    full_tuple = VersionInfo(
        version_info.major,
        version_info.minor,
        version_info.micro,
        release_level,
        serial,
    )

    # write directly to the disnake folder
    with open(context.root / "disnake/_version.py", "w") as f:
        contents = VERSION_FILE_TEMPLATE.format(
            version_tuple=full_tuple, version_string=version
        ).lstrip()
        f.write(contents)
