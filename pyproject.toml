# SPDX-License-Identifier: MIT

[build-system]
requires = ["setuptools>=61"]
build-backend = "setuptools.build_meta"

[project]
name = "disnake"
description = "A Python wrapper for the Discord API"
readme = "README.md"
authors = [
  { name = "Disnake Development" }
]
requires-python = ">=3.8"
keywords = ["disnake", "discord", "discord api"]
license = { text = "MIT" }
dependencies = [
    "aiohttp>=3.7.0,<4.0",
    "typing-extensions>=4.1",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: MIT License",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
    "Typing :: Typed",
]
dynamic = ["version"]

[project.urls]
Changelog = "https://docs.disnake.dev/page/whats_new.html"
Documentation = "https://docs.disnake.dev/"
Repository = "https://github.com/DisnakeDev/disnake"

[project.optional-dependencies]
speed = [
    "orjson~=3.6",
    # taken from aiohttp[speedups]
    "aiodns>=1.1",
    "Brotli",
    'cchardet; python_version < "3.10"',
]
voice = [
    "PyNaCl>=1.5.0,<1.6",
    'audioop-lts>=0.2.1; python_version >= "3.13"'
]
docs = [
    "sphinx==7.0.1",
    "sphinxcontrib-trio~=1.1.2",
    "sphinx-hoverxref==1.3.0",
    "sphinx-autobuild~=2021.3",
    "sphinxcontrib-towncrier==0.3.2a0",
    "towncrier==23.6.0",
    "sphinx-notfound-page==0.8.3",
    "sphinxext-opengraph==0.9.1",
]

[dependency-groups]
nox = [
    "nox==2025.5.1",
]
ruff = [
    "ruff==0.13.0",
]
tools = [
    "pre-commit~=3.0",
    "slotscheck~=0.16.4",
    "check-manifest==0.49",
    { include-group = "ruff" },
]
changelog = [
    "towncrier==23.6.0",
]
codemod = [
    # run codemods on the repository (mostly automated typing)
    "libcst~=1.1.0",
    "autotyping==23.2.0",
    { include-group = "ruff" },
]
typing = [
    # this is not pyright itself, but the python wrapper
    "pyright==1.1.389",
    # only used for type-checking, version does not matter
    "pytz",
]
test = [
    "pytest~=8.3.2",
    "pytest-cov~=4.0.0",
    "pytest-asyncio~=0.24.0",
    "looptime~=0.2.0",
    "coverage[toml]~=7.6.0",
    "typing-extensions>=4.6",
]
build = [
    "build~=1.2",
    "twine~=6.1",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["disnake*"]

[tool.nox]
script-venv-backend = "uv|virtualenv"

[tool.pdm]
# Ignore `requires-python` warnings when locking, the latest versions of some
# dependencies already require >=3.9
# See also https://pdm-project.org/en/latest/usage/config/#ignore-package-warnings
ignore_package_warnings = ["*"]

[tool.pdm.scripts]
docs = { cmd = "nox -Rs docs --", help = "Build the documentation for development" }
lint = { cmd = "nox -Rs lint --", help = "Check all files for linting errors" }
pyright = { cmd = "nox -Rs pyright --", help = "Run pyright" }
setup_env = { cmd = "{pdm} run noxfile.py -s dev", help = "Set up the local environment and all dependencies" }
test = { cmd = "nox -Rs test --", help = "Run pytest" }

[tool.ruff]
line-length = 100

[tool.codespell]
skip = ['docs/_static/**', '*.po']
ignore-words-list = ['GroupT', "OT",]

[tool.ruff.lint]
future-annotations = true
select = ["ALL"]
ignore = [
    ## eradicate
    "ERA", # most of our commented-out code is excluded
    ## flake8-annotations
    "ANN0",
    "ANN4",
    ## flake8-bandit
    "S311", # use of random is fine in most cases
    "S603", # calling subprocess with dynamic arguments is generally fine, the only way to avoid this is ignoring it
    "S607", # partial executable paths (i.e. "git" instead of "/usr/bin/git") are fine
    "S110", # ignore try-except-pass. Bare excepts are caught with E722
    ## flake8-blind-except
    "BLE", # similar to S110, but also flags Exception
    ## flake8-boolean-trap
    "FBT", # at some point we should make booleans keyword only
    ## flake8-commas
    "COM812", # mostly managed by the formatter
    ## flake8-errmsg
    "EM", # TODO: Enable; too noisy for this, but has autofixes
    ## flake8-fixme
    "FIX", # TODO: what the name says!
    ## flake8-no-pep420
    "INP001", # Ha.
    ## flake8-pie
    "PIE790", # TODO: removes pass or ... when there is a docstring
    ## flake8-print
    "T201", # TODO: disabled until the library configures logging
    ## flake8-pyi
    "PYI", # TODO: enable, in separate PR (most have autofixes)
    ## flake8-return
    "RET", # TODO: enable, most have autofixes.
    ## flake8-self
    "SLF", # private member access, this is unlikely to be enabled.
    ## flake8-simplify
    "SIM", # TODO: enable, most have autofixes.
    ## flake8-tidy-imports
    "TID252", # we still use relative imports
    ## flake8-todos
    "TD", # similar to flake8-fixme, though they may conflict
    ## flake8-typechecking
    "TC", # TODO: enable in typing PR
    ## flake8-unused-arguments
    "ARG", # most unused arguments are intentional
    ## flake8-use-pathlib
    "PTH", # TODO: enable in separate PR
    ## mccabe
    "C90",
    ## pep8-naming
    "N", # too specific for now
    ## Perflint
    "PERF203", # try, except within loops; # TODO: refactor
    "PERF401", # TODO: enable!
    ## pycodestyle
    "E501", # lines too long
    "E731", # lambda expression assigned
    ## pydocstyle
    "D1", "D205", "D301", "D400", "D401",
    ## pygrep-hooks
    "PGH003", # blanket type ignores
    ## Pylint
    # PLC
    "PLC0105",
    "PLC0414",
    "PLC0415",
    "PLR",
    # PLW
    "PLW1641",
    "PLW2901",
    ## Ruff-specific rules
    "RUF006", # not actually sure this is a bug at all...
    "RUF022", # TODO: consider enabling
    "RUF023", # TODO: consider enabling
    ## tryceratops
    "TRY003", # as of 0.12.11 still has some false positives
    "TRY301", # TODO: enable
    "TRY300", # TODO: enable
]

[tool.ruff.lint.per-file-ignores]
"disnake/*.py" = [
    "F403", # Pyflakes: allow star imports
]
"disnake/client.py" = ["T201"]
## examples
"examples/*.py" = [
    "ANN", # missing type annotations in examples is fine
    "B008", # do not perform function calls in argument defaults, this is how most commands work
    "E741", # allow ambiguous variable names
    "S104", # flake8-bandit: allow binding to all interfaces
    "T201", # print found, printing is okay in examples
]
"examples/basic_voice.py" = ["S104"] # possible binding to all interfaces

## scripts
"scripts/*.py" = [
    "S101", # flake8-bandit: allow scripts to use assertions
]
"scripts/ci/*.py" = [
    "T20", # allow print temporarily before shifting to logging
]

## tests
"!tests/*" = [ "PT" ] # enable PT in only the tests directory
"tests/*.py" = [
    "E741", # ambiguous variable names
    "S101", # flake8-bandit: allow tests to use assertions
    "PT030", # to be enabled: allow pytest.warns without a match parameter
]
"noxfile.py" = ["EXE003"]

[tool.ruff.lint.flake8-annotations]
ignore-fully-untyped = true

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = [
    "disnake.ext.commands.inject",
    "disnake.ext.commands.Param",
    "disnake.webhook.async_.AsyncWebhookAdapter",
]

[tool.ruff.lint.flake8-builtins]
ignorelist = [
    "id",
    "type",
    "copyright",
    "format",

    # TODO: remove
    "globals",
    "locals",
]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"subprocess".msg = "Consider possible security implications associated with the subprocess module." # replaces S404

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.isort]
combine-as-imports = true

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.towncrier]
template = "changelog/_template.rst.jinja"
package = "disnake"
filename = "docs/whats_new.rst"
directory = "changelog/"
title_format = false
underlines = "-~"
issue_format = ":issue:`{issue}`"

    [[tool.towncrier.type]]
    directory = "breaking"
    name = "Breaking Changes"
    showcontent = true

    [[tool.towncrier.type]]
    directory = "deprecate"
    name = "Deprecations"
    showcontent = true

    [[tool.towncrier.type]]
    directory = "feature"
    name = "New Features"
    showcontent = true

    [[tool.towncrier.type]]
    directory = "bugfix"
    name = "Bug Fixes"
    showcontent = true

    [[tool.towncrier.type]]
    directory = "doc"
    name = "Documentation"
    showcontent = true

    [[tool.towncrier.type]]
    directory = "misc"
    name = "Miscellaneous"
    showcontent = true


[tool.slotscheck]
strict-imports = true
require-superclass = true
require-subclass = false
exclude-modules = '''
(
    ^disnake\.types\.
)
'''


[tool.pyright]
typeCheckingMode = "strict"
include = [
    "disnake",
    "docs",
    "examples",
    "scripts",
    "tests",
    "*.py",
]
ignore = [
    "disnake/ext/mypy_plugin",
]

# this is one of the diagnostics that aren't enabled by default, even in strict mode
reportUnnecessaryTypeIgnoreComment = true

# it's unlikely that these will ever be enabled
reportOverlappingOverload = false
reportPrivateUsage = false
reportUnnecessaryIsInstance = false
reportFunctionMemberAccess = false
reportMissingTypeStubs = false
reportUnusedFunction = false
reportUnusedClass = false
reportConstantRedefinition = false
reportImportCycles = false
reportIncompatibleMethodOverride = false
reportIncompatibleVariableOverride = false

# TODO: re-enable
# these were added in the upgrade from pyright 1.1.336 to 1.1.405
reportInconsistentOverload = false
reportInvalidTypeVarUse = false
reportInvalidTypeForm = false

# these are largely due to missing type hints, and make up most of the error count
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownArgumentType = false
reportMissingParameterType = false
reportUnknownVariableType = false
reportMissingTypeArgument = false


[tool.pytest.ini_options]
minversion = "8.2"
pythonpath = "." # legacy configuration, new pytest versions don't add the rootdir to path
testpaths = "tests"
addopts = "--strict-markers -Werror -s"
xfail_strict = true
asyncio_mode = "strict"

[tool.coverage.run]
branch = true
include = [
    "disnake/*",
    "tests/*",
]
omit = [
    "disnake/ext/mypy_plugin/*",
    "disnake/types/*",
    "disnake/__main__.py",
]

[tool.coverage.report]
precision = 1
exclude_lines = [
    "# pragma: no cov(er(age)?)?$",
    "^\\s*def __repr__",
    "^\\s*@overload",
    "^\\s*if TYPE_CHECKING",
    "^\\s*raise NotImplementedError$",
    "^\\s*\\.\\.\\.$",
]


[tool.check-manifest]
ignore = [
    # CI
    ".pre-commit-config.yaml",
    ".readthedocs.yml",
    ".libcst.codemod.yaml",
    "noxfile.py",
    # docs
    "CONTRIBUTING.md",
    "RELEASE.md",
    "assets/**",
    "changelog/**",
    "docs/**",
    "examples/**",
    # tests
    "tests/**",
    "scripts/**",
]
