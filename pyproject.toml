[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310"]


[tool.isort]
profile = "black"
py_version = 38
line_length = 100
combine_as_imports = true
filter_files = true


[tool.taskipy.tasks]
black = { cmd = "task lint black", help = "Run black" }
docs = { cmd = "cd docs && sphinx-autobuild . _build/html --ignore _build --watch ../disnake --port 8009", help = "Build the documentation on an autoreloading server."}
isort = { cmd = "task lint isort", help = "Run isort" }
lint = { cmd = "pre-commit run --all-files", help = "Check all files for linting errors" }
precommit = { cmd = "pre-commit install --install-hooks", help = "Install the precommit hook" }
pyright = { cmd = "dotenv -f task.env run -- pyright", help = "Run pyright" }
slotscheck = { cmd = "python -m slotscheck --verbose -m disnake", help = "Run slotscheck" }
test = { cmd = "pytest -v --cov --cov-report=term", help = "Run pytest" }


[tool.slotscheck]
strict-imports = true
require-superclass = true
require-subclass = false
exclude-modules = '''
(
    ^disnake\.types\.
)
'''


[tool.pyright]
typeCheckingMode = "basic"
include = [
    "disnake",
    "docs",
    "test_bot",
    "*.py",
]

strictParameterNoneValue = false
reportInvalidStringEscapeSequence = false
reportPropertyTypeMismatch = true
reportDuplicateImport = true
reportUntypedFunctionDecorator = true
reportUntypedClassDecorator = true
reportUntypedBaseClass = true
reportInvalidTypeVarUse = true
reportUnnecessaryCast = true
reportSelfClsParameterName = true
reportUnsupportedDunderAll = true
reportUnusedImport = true
reportUnusedVariable = true
reportUntypedNamedTuple = true
reportUnnecessaryComparison = true
reportUnnecessaryTypeIgnoreComment = true
reportUnknownLambdaType = true


[tool.pytest.ini_options]
testpaths = "tests"
addopts = "--strict-markers"
xfail_strict = true

[tool.coverage.run]
branch = true
source = ["disnake"]
omit = [
    "disnake/ext/mypy_plugin/*",
    "disnake/types/*",
    "disnake/__main__.py",
]

[tool.coverage.report]
precision = 1
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "@overload",
    "if TYPE_CHECKING",
]
