# SPDX-License-Identifier: MIT
[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "disnake"
version = "2.7.0a"
description = "A Python wrapper for the Discord API"
authors = ["Rapptz, EQUENOS"]
license = "MIT"
readme = "README.md"
homepage = "https://disnake.dev/"
repository = "https://github.com/DisnakeDev/disnake"
documentation = "https://docs.disnake.dev/en/latest"
keywords = ["discord", "api","bots"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: MIT License",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Topic :: Internet",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
    "Typing :: Typed",
]
include = [
    "LICENSE",
    "disnake/bin/*",
    "disnake/py.typed",
    ]
exclude = [
    "*.py[cod]"
]


[tool.poetry.dependencies]
python = "^3.8"
aiohttp = ">=3.7.0,<4"


# speed
orjson = { version = "~=3.6", optional = true }
aiodns = { version = ">=1.1", optional = true }
Brotli = { version = "*", optional = true }
cchardet = { version = "*", optional = true, python = "<3.10" }

# voice
PyNaCl = { version = ">=1.3.0,<1.5", optional = true }

# docs
docutils = { version = ">=0.17", optional = true }
sphinx = { version = "==5.2.3", optional = true }
sphinxcontrib-trio = { version = "~=1.1.2", optional = true }
sphinx-hoverxref = { version = "==1.1.3", optional = true }
sphinx-autobuild = { version = "~=2021.3", optional = true }
sphinxcontrib-towncrier = { version = "==0.3.0a0", optional = true }
towncrier = { version = "==22.8.0", optional = true }

[tool.poetry.extras]
speed = ["orjson", "aiodns", "Brotli", "cchardet"]
voice = ["PyNaCl"]
docs = ["docutils", "sphinx", "sphinxcontrib-trio", "sphinx-hoverxref", "sphinx-autobuild", "sphinxcontrib-towncrier", "towncrier"]

[tool.poetry.group.typing.dependencies]
typing-extensions = ">=4.2.0,<4.3.0"
pyright = "1.1.271"

[tool.poetry.group.lint.dependencies]
pre-commit = { version = "~=2.19.0" }
black = {version = "==22.6.0" }
isort = "==5.10.1"
slotscheck = { version = "~=0.15.0" }
flake8 = { version = "~=4.0.1" }
flake8-bandit = { version = "~=3.0.0" }
flake8-bugbear = { version = "==22.7.1" }
flake8-comprehensions = { version = "~=3.10.0" }
flake8-noqa = { version = "~=1.2.5" }
flake8-pytest-style = { version = "~=1.6.0" }

[tool.poetry.group.test.dependencies]
pytest = { version = "~=7.1.2" }
pytest-cov = { version = "~=3.0.0" }
pytest-asyncio = { version = "~=0.18.3" }
looptime = { version = "~=0.2" }
coverage = { version = "~=6.3.2", extras = ["toml"] }

[tool.poetry.group.tools.dependencies]
pre-commit = { version = "~=2.19.0" }
libcst = "^0.4.7"
taskipy = ">=1.10.1,<1.11.0"


[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310"]


[tool.isort]
profile = "black"
py_version = 38
line_length = 100
combine_as_imports = true
filter_files = true


[tool.taskipy.tasks]
black = { cmd = "task lint black", help = "Run black" }
docs = { cmd = "nox -Rs docs --", help = "Build the documentation for development"}
flake8 = { cmd = "flake8", help = "Run flake8"}
isort = { cmd = "task lint isort", help = "Run isort" }
lint = { cmd = "nox -Rs lint --", help = "Check all files for linting errors" }
pyright = { cmd = "nox -Rs pyright --", help = "Run pyright" }
setup_env = {cmd = 'nox -s setup --', help = 'Setup the local environment and set up all dependencies'}
test = { cmd = "nox -Rs test --", help = "Run pytest" }


[tool.towncrier]
template = "changelog/_template.rst.jinja"
package = "disnake"
filename = "docs/whats_new.rst"
directory = "changelog/"
title_format = false
underlines = "-~"
issue_format = ":issue:`{issue}`"

    [[tool.towncrier.type]]
    directory = "breaking"
    name = "Breaking Changes"
    showcontent = true

    [[tool.towncrier.type]]
    directory = "deprecate"
    name = "Deprecations"
    showcontent = true

    [[tool.towncrier.type]]
    directory = "feature"
    name = "New Features"
    showcontent = true

    [[tool.towncrier.type]]
    directory = "bugfix"
    name = "Bug Fixes"
    showcontent = true

    [[tool.towncrier.type]]
    directory = "doc"
    name = "Documentation"
    showcontent = true

    [[tool.towncrier.type]]
    directory = "misc"
    name = "Miscellaneous"
    showcontent = true


[tool.slotscheck]
strict-imports = true
require-superclass = true
require-subclass = false
exclude-modules = '''
(
    ^disnake\.types\.
)
'''


[tool.pyright]
typeCheckingMode = "strict"
include = [
    "disnake",
    "docs",
    "examples",
    "test_bot",
    "tests",
    "*.py",
]
ignore = [
    "disnake/ext/mypy_plugin",
    "noxfile.py",  # this is ignored because nox is not installed in the environment when running pyright
]

# this is one of the diagnostics that aren't enabled by default, even in strict mode
reportUnnecessaryTypeIgnoreComment = true

# it's unlikely that these will ever be enabled
reportOverlappingOverload = false
reportPrivateUsage = false
reportUnnecessaryIsInstance = false
reportFunctionMemberAccess = false
reportMissingTypeStubs = false
reportUnusedFunction = false
reportUnusedClass = false
reportConstantRedefinition = false
reportImportCycles = false
reportIncompatibleMethodOverride = false
reportIncompatibleVariableOverride = false

# these are largely due to missing type hints, and make up most of the error count
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownArgumentType = false
reportMissingParameterType = false
reportUnknownVariableType = false
reportMissingTypeArgument = false


[tool.pytest.ini_options]
testpaths = "tests"
addopts = "--strict-markers -Werror -s"
xfail_strict = true
asyncio_mode = "strict"

[tool.coverage.run]
branch = true
include = [
    "disnake/*",
    "tests/*",
]
omit = [
    "disnake/ext/mypy_plugin/*",
    "disnake/types/*",
    "disnake/__main__.py",
]

[tool.coverage.report]
precision = 1
exclude_lines = [
    "# pragma: no cov(er(age)?)?$",
    "^\\s*def __repr__",
    "^\\s*@overload",
    "^\\s*if TYPE_CHECKING",
    "^\\s*raise NotImplementedError$",
    "^\\s*\\.\\.\\.$",
]


[tool.check-manifest]
ignore = [
    # CI
    ".flake8",
    ".pre-commit-config.yaml",
    ".readthedocs.yml",
    ".libcst.codemod.yaml",
    "noxfile.py",
    # docs
    "CONTRIBUTING.md",
    "assets/**",
    "changelog/**",
    "docs/**",
    "examples/**",
    # tests
    "test_bot/**",
    "test_launcher.py",
    "tests/**",
    "scripts/**",
]
