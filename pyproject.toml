# SPDX-License-Identifier: MIT

[build-system]
requires = ["setuptools>=61"]
build-backend = "setuptools.build_meta"

[project]
name = "disnake"
description = "A Python wrapper for the Discord API"
readme = "README.md"
authors = [
  { name = "Disnake Development" }
]
requires-python = ">=3.8"
keywords = ["disnake", "discord", "discord api"]
license = { text = "MIT" }
dependencies = [
    "aiohttp>=3.7.0,<4.0",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: MIT License",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Internet",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
    "Typing :: Typed",
]
dynamic = ["version"]

[project.urls]
Changelog = "https://docs.disnake.dev/page/whats_new.html"
Documentation = "https://docs.disnake.dev/"
Repository = "https://github.com/DisnakeDev/disnake"

[project.optional-dependencies]
speed = [
    "orjson~=3.6",
    # taken from aiohttp[speedups]
    "aiodns>=1.1",
    "Brotli",
    'cchardet; python_version < "3.10"',
]
voice = [
    "PyNaCl>=1.3.0,<1.5",
]
docs = [
    "sphinx==6.0.1",
    "sphinxcontrib-trio~=1.1.2",
    "sphinx-hoverxref==1.3.0",
    "sphinx-autobuild~=2021.3",
    "sphinxcontrib-towncrier==0.3.2a0",
    "towncrier==22.12.0",
    "sphinx-notfound-page==0.8.3",
]
discord = ["discord-disnake"]

[tool.pdm.dev-dependencies]
tools = [
    "pre-commit~=2.19.0",
    "taskipy~=1.10.1",
    "slotscheck~=0.15.0",
    "python-dotenv~=0.20.0",
    "towncrier==22.12.0",
    "check-manifest==0.48",
]
codemod = [
    # run codemods on the respository (mostly automated typing)
    "libcst~=0.4.7",
    "black==23.1.0",
]
lint = [
    "flake8~=4.0.1",
    "flake8-bandit~=3.0.0",
    "flake8-bugbear==22.7.1",
    "flake8-comprehensions~=3.10.0",
    "flake8-noqa~=1.2.5",
    "flake8-pytest-style~=1.6.0",
]
typing = [
    "typing-extensions~=4.2.0",
    # this is not pyright itself, but the python wrapper
    "pyright==1.1.291",
]
test = [
    "pytest~=7.2.0",
    "pytest-cov~=4.0.0",
    "pytest-asyncio~=0.20.3",
    "looptime~=0.2",
    "coverage[toml]~=6.5.0",
]

[tool.pdm.scripts]
black = { composite = ["lint black"], help = "Run black" }
docs = { cmd = "nox -Rs docs --", help = "Build the documentation for development" }
flake8 = { cmd = "flake8", help = "Run flake8" }
isort = { composite = ["lint isort"], help = "Run isort" }
lint = { cmd = "nox -Rs lint --", help = "Check all files for linting errors" }
pyright = { cmd = "nox -Rs pyright --", help = "Run pyright" }
setup_env = { cmd = "pdm install -d -G speed -G docs -G voice", help = "Set up the local environment and all dependencies" }
post_setup_env = { composite = ["python -m ensurepip --default-pip", "pre-commit install --install-hooks"] }
test = { cmd = "nox -Rs test --", help = "Run pytest" }

# legacy tasks for those who still type `task`
[tool.taskipy.tasks]
black = { cmd = "black", help = "Run black" }
docs = { cmd = "docs", help = "Build the documentation for development" }
flake8 = { cmd = "flake8", help = "Run flake8" }
isort = { cmd = "isort", help = "Run isort" }
lint = { cmd = "lint", help = "Check all files for linting errors" }
pyright = { cmd = "pyright", help = "Run pyright" }
setup_env = { cmd = "setup_env", help = "Setup the local environment and set up all dependencies" }
test = { cmd = "test", help = "Run pytest" }

[tool.taskipy.settings]
runner = "pdm run"

[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310"]

[tool.isort]
profile = "black"
py_version = 38
line_length = 100
combine_as_imports = true
filter_files = true

[tool.towncrier]
template = "changelog/_template.rst.jinja"
package = "disnake"
filename = "docs/whats_new.rst"
directory = "changelog/"
title_format = false
underlines = "-~"
issue_format = ":issue:`{issue}`"

    [[tool.towncrier.type]]
    directory = "breaking"
    name = "Breaking Changes"
    showcontent = true

    [[tool.towncrier.type]]
    directory = "deprecate"
    name = "Deprecations"
    showcontent = true

    [[tool.towncrier.type]]
    directory = "feature"
    name = "New Features"
    showcontent = true

    [[tool.towncrier.type]]
    directory = "bugfix"
    name = "Bug Fixes"
    showcontent = true

    [[tool.towncrier.type]]
    directory = "doc"
    name = "Documentation"
    showcontent = true

    [[tool.towncrier.type]]
    directory = "misc"
    name = "Miscellaneous"
    showcontent = true


[tool.slotscheck]
strict-imports = true
require-superclass = true
require-subclass = false
exclude-modules = '''
(
    ^disnake\.types\.
)
'''


[tool.pyright]
typeCheckingMode = "strict"
include = [
    "disnake",
    "docs",
    "examples",
    "test_bot",
    "tests",
    "*.py",
]
ignore = [
    "disnake/ext/mypy_plugin",
    "noxfile.py",  # this is ignored because nox is not installed in the environment when running pyright
]

# this is one of the diagnostics that aren't enabled by default, even in strict mode
reportUnnecessaryTypeIgnoreComment = true

# it's unlikely that these will ever be enabled
reportOverlappingOverload = false
reportPrivateUsage = false
reportUnnecessaryIsInstance = false
reportFunctionMemberAccess = false
reportMissingTypeStubs = false
reportUnusedFunction = false
reportUnusedClass = false
reportConstantRedefinition = false
reportImportCycles = false
reportIncompatibleMethodOverride = false
reportIncompatibleVariableOverride = false

# these are largely due to missing type hints, and make up most of the error count
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownArgumentType = false
reportMissingParameterType = false
reportUnknownVariableType = false
reportMissingTypeArgument = false


[tool.pytest.ini_options]
testpaths = "tests"
addopts = "--strict-markers -Werror -s"
xfail_strict = true
asyncio_mode = "strict"

[tool.coverage.run]
branch = true
include = [
    "disnake/*",
    "tests/*",
]
omit = [
    "disnake/ext/mypy_plugin/*",
    "disnake/types/*",
    "disnake/__main__.py",
]

[tool.coverage.report]
precision = 1
exclude_lines = [
    "# pragma: no cov(er(age)?)?$",
    "^\\s*def __repr__",
    "^\\s*@overload",
    "^\\s*if TYPE_CHECKING",
    "^\\s*raise NotImplementedError$",
    "^\\s*\\.\\.\\.$",
]


[tool.check-manifest]
ignore = [
    # CI
    ".flake8",
    ".pre-commit-config.yaml",
    ".readthedocs.yml",
    ".libcst.codemod.yaml",
    "noxfile.py",
    # docs
    "CONTRIBUTING.md",
    "assets/**",
    "changelog/**",
    "docs/**",
    "examples/**",
    # tests
    "test_bot/**",
    "tests/**",
    "scripts/**",
]
