# SPDX-License-Identifier: MIT

[build-system]
requires = ["setuptools>=61"]
build-backend = "setuptools.build_meta"

[project]
name = "disnake"
description = "A Python wrapper for the Discord API"
readme = "README.md"
authors = [
  { name = "Disnake Development" }
]
requires-python = ">=3.8"
keywords = ["disnake", "discord", "discord api"]
license = { text = "MIT" }
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: MIT License",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Internet",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
    "Typing :: Typed",
]
dynamic = ["version", "dependencies", "optional-dependencies"]

[project.urls]
Changelog = "https://docs.disnake.dev/page/whats_new.html"
Documentation = "https://docs.disnake.dev/"
Repository = "https://github.com/DisnakeDev/disnake"

[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310"]


[tool.isort]
profile = "black"
py_version = 38
line_length = 100
combine_as_imports = true
filter_files = true

[tool.ruff]
line-length = 100
target-version = "py38"
src = ["disnake"]
select = [
    # commented out codes are intended to be enabled in future prs
    "F", # pyflakes
    "E","W", # pycodestyle
    # "D", # pydocstyle
    # "ANN", # flake8-annotations
    "S", # flake8-bandit
    "B", # flake8-bugbear
    "C", # flake8-comprehensions
    # "DTZ", # flake8-datetimez
    # "EM", # flake8-errmsg
    "G", # flake8-logging-format
    # "RET", # flake8-return
    # "SIM", # flake8-simplify
    "TID251", # flake8-tidy-imports, replaces S404
    # "TCH", # flake8-type-checking
    # "RUF", # ruff specific exceptions
    "RUF100", # unused noqa directive
    "PT", # flake8-pytest-style
    "Q", # flake8-quotes
    "T20", # flake8-print
    "PGH", # pygrep-hooks
    "TRY002", "TRY004","TRY300", # tryceratops
]
ignore = [
    # star imports
    "F401","F403",

    # unknown if this is actually an issue
    "RUF006",

    # ignore try-except-pass. Bare excepts are caught with E722
    "S110",

    # provide specific codes on type: ignore
    "PGH003",

    # temporary disables, to fix later
    "B904", # within an except clause raise from error or from none
    "B026", # backwards star-arg unpacking
    "E501", # line too long
    "E731", # assigning lambdas to variables
    "T201", # print statements
]

[tool.ruff.per-file-ignores]
"disnake/__main__.py" = ["T201"]
"disnake/i18n.py" = ["B027"] # lib bug
"disnake/types/**.py" = ["TCH"]
"disnake/**.py" = ["PT"]
"examples/*.py" = ["B008", "T201", "PT"]
"examples/basic_voice.py" = ["S104"]
"examples/views/tic_tac_toe.py" = ["E741", "RET505"]
"test_bot/*.py" = ["B008", "T201", "PT"]
"tests/*.py" = ["S101"]

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.flake8-tidy-imports]
[tool.ruff.flake8-tidy-imports.banned-api]
"subprocess".msg = "Consider possible security implications associated with the subprocess module." # replaces S404

[tool.taskipy.tasks]
black = { cmd = "task lint black", help = "Run black" }
docs = { cmd = "nox -Rs docs --", help = "Build the documentation for development"}
isort = { cmd = "task lint isort", help = "Run isort" }
lint = { cmd = "nox -Rs lint --", help = "Check all files for linting errors" }
pyright = { cmd = "nox -Rs pyright --", help = "Run pyright" }
setup_env = {cmd = 'nox -s setup --', help = 'Setup the local environment and set up all dependencies'}
test = { cmd = "nox -Rs test --", help = "Run pytest" }


[tool.towncrier]
template = "changelog/_template.rst.jinja"
package = "disnake"
filename = "docs/whats_new.rst"
directory = "changelog/"
title_format = false
underlines = "-~"
issue_format = ":issue:`{issue}`"

    [[tool.towncrier.type]]
    directory = "breaking"
    name = "Breaking Changes"
    showcontent = true

    [[tool.towncrier.type]]
    directory = "deprecate"
    name = "Deprecations"
    showcontent = true

    [[tool.towncrier.type]]
    directory = "feature"
    name = "New Features"
    showcontent = true

    [[tool.towncrier.type]]
    directory = "bugfix"
    name = "Bug Fixes"
    showcontent = true

    [[tool.towncrier.type]]
    directory = "doc"
    name = "Documentation"
    showcontent = true

    [[tool.towncrier.type]]
    directory = "misc"
    name = "Miscellaneous"
    showcontent = true


[tool.slotscheck]
strict-imports = true
require-superclass = true
require-subclass = false
exclude-modules = '''
(
    ^disnake\.types\.
)
'''


[tool.pyright]
typeCheckingMode = "strict"
include = [
    "disnake",
    "docs",
    "examples",
    "test_bot",
    "tests",
    "*.py",
]
ignore = [
    "disnake/ext/mypy_plugin",
    "noxfile.py",  # this is ignored because nox is not installed in the environment when running pyright
]

# this is one of the diagnostics that aren't enabled by default, even in strict mode
reportUnnecessaryTypeIgnoreComment = true

# it's unlikely that these will ever be enabled
reportOverlappingOverload = false
reportPrivateUsage = false
reportUnnecessaryIsInstance = false
reportFunctionMemberAccess = false
reportMissingTypeStubs = false
reportUnusedFunction = false
reportUnusedClass = false
reportConstantRedefinition = false
reportImportCycles = false
reportIncompatibleMethodOverride = false
reportIncompatibleVariableOverride = false

# these are largely due to missing type hints, and make up most of the error count
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownArgumentType = false
reportMissingParameterType = false
reportUnknownVariableType = false
reportMissingTypeArgument = false


[tool.pytest.ini_options]
testpaths = "tests"
addopts = "--strict-markers -Werror -s"
xfail_strict = true
asyncio_mode = "strict"

[tool.coverage.run]
branch = true
include = [
    "disnake/*",
    "tests/*",
]
omit = [
    "disnake/ext/mypy_plugin/*",
    "disnake/types/*",
    "disnake/__main__.py",
]

[tool.coverage.report]
precision = 1
exclude_lines = [
    "# pragma: no cov(er(age)?)?$",
    "^\\s*def __repr__",
    "^\\s*@overload",
    "^\\s*if TYPE_CHECKING",
    "^\\s*raise NotImplementedError$",
    "^\\s*\\.\\.\\.$",
]


[tool.check-manifest]
ignore = [
    # CI
    ".flake8",
    ".pre-commit-config.yaml",
    ".readthedocs.yml",
    ".libcst.codemod.yaml",
    "noxfile.py",
    # docs
    "CONTRIBUTING.md",
    "assets/**",
    "changelog/**",
    "docs/**",
    "examples/**",
    # tests
    "test_bot/**",
    "test_launcher.py",
    "tests/**",
    "scripts/**",
]
