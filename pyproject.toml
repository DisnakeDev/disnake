[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310"]


[tool.isort]
profile = "black"
py_version = 38
line_length = 100
combine_as_imports = true
filter_files = true


[tool.taskipy.tasks]
black = { cmd = "task lint black", help = "Run black" }
isort = { cmd = "task lint isort", help = "Run isort" }
lint = { cmd = "nox -Rs lint --", help = "Check all files for linting errors" }
docs = { cmd = "nox -Rs docs --", help = "Build the documentation for development"}
pyright = { cmd = "nox -Rs pyright --", help = "Run pyright" }
slotscheck = { cmd = "nox -Rs slotscheck --", help = "Run slotscheck" }
setup_env = {cmd = 'nox -s setup --', help = 'Setup the local environment and set up all dependencies'}
test = { cmd = "nox -Rs test --", help = "Run pytest" }


[tool.slotscheck]
strict-imports = true
require-superclass = true
require-subclass = false
exclude-modules = '''
(
    ^disnake\.types\.
)
'''


[tool.pyright]
typeCheckingMode = "basic"
include = [
    "disnake",
    "docs",
    "examples",
    "test_bot",
    "tests",
    "*.py",
]
ignore = [
    "disnake/ext/mypy_plugin",
    "noxfile.py",  # this is ignored because nox is not installed in the environment when running pyright
]

strictParameterNoneValue = false
reportInvalidStringEscapeSequence = false
reportDuplicateImport = true
reportUntypedFunctionDecorator = true
reportUntypedClassDecorator = true
reportUntypedBaseClass = true
reportInvalidTypeVarUse = true
reportUnnecessaryCast = true
reportSelfClsParameterName = true
reportUnsupportedDunderAll = true
reportUnusedImport = true
reportUnusedVariable = true
reportUntypedNamedTuple = true
reportUnnecessaryComparison = true
reportUnnecessaryTypeIgnoreComment = true
reportUnknownLambdaType = true


[tool.pytest.ini_options]
testpaths = "tests"
addopts = "--strict-markers -Werror -s"
xfail_strict = true
asyncio_mode = "strict"

[tool.coverage.run]
branch = true
include = [
    "disnake/*",
    "tests/*",
]
omit = [
    "disnake/ext/mypy_plugin/*",
    "disnake/types/*",
    "disnake/__main__.py",
]

[tool.coverage.report]
precision = 1
exclude_lines = [
    "# pragma: no cov(er(age)?)?$",
    "^\\s*def __repr__",
    "^\\s*@overload",
    "^\\s*if TYPE_CHECKING",
    "^\\s*raise NotImplementedError$",
    "^\\s*\\.\\.\\.$",
]
