# SPDX-License-Identifier: MIT

name: Lint & Test

on:
  push:
    branches:
      - "master"
      - "v[0-9]+.[0-9]+.x" # matches to backport branches, e.g. v3.6.x
      - "run-ci/*"
    tags:
  pull_request:
  merge_group:
    types: [checks_requested]

permissions: read-all

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  USE_UV_VERSION: "0.8.14"
  UV_RESOLUTION: "highest"
  UV_LOCKED: 1
  UV_NO_SYNC: 1

jobs:
  lock-dependencies:
    # The only purpose of this is to create a lockfile, which will be cached
    # to be used with subsequent jobs.
    # This provides somewhat of a middle ground and avoids having each job lock dependencies on its own,
    # while still not needing to commit a lockfile to the repo, which is discouraged for libraries as per
    # https://pdm-project.org/en/latest/usage/lockfile/
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up uv to lock dependencies
        id: setup-python
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.USE_UV_VERSION }}
          enable-cache: true

      - name: Restore uv lock
        uses: actions/cache/restore@v4
        id: cache-uv-lock
        with:
          key: uv-lock-resolved-${{ env.UV_RESOLUTION }}
          restore-keys: |
            uv-lock-resolved-${{ env.UV_RESOLUTION }}
          path: uv.lock
          enableCrossOsArchive: true

      - name: Check if uv.lock changed
        id: uv-lock-changed
        continue-on-error: true
        if: steps.cache-uv-lock.outputs.cache-hit == 'true' || steps.cache-uv-lock.outputs.cache-hit == 'false'
        run: |
          uv lock --check

      - name: Lock dependencies
        if: steps.uv-lock-changed.outcome == 'failure' || steps.cache-uv-lock.outputs.cache-hit != 'true' && steps.cache-uv-lock.outputs.cache-hit != 'false'
        id: lock-uv-deps
        env:
          UV_LOCKED: 0
        run: uv lock --refresh

      - uses: actions/cache/save@v4
        if: steps.lock-uv-deps.outcome == 'success'  && steps.uv-lock-changed.outcome == 'failure'
        name: upload-uv-lock
        with:
          key: uv-lock-resolved-${{ env.UV_RESOLUTION}}-${{hashFiles('uv.lock')}}
          path: uv.lock
          enableCrossOsArchive: true

  # used for pyright and tests
  determine-python-versions:
    runs-on: ubuntu-latest
    outputs:
      test-python-versions: ${{ steps.set-matrix.outputs.test-python-versions }}
      libcst-python-version: ${{ steps.set-matrix.outputs.libcst-python-version }}
      misc-checks-python-version: ${{ steps.set-matrix.outputs.misc-checks-python-version }}
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.USE_UV_VERSION }}
          enable-cache: true
          python-version: 3.8

      - name: Determine Python versions to test and lint against
        id: set-matrix
        run: |
          echo test-python-versions=$(uv run noxfile.py -s test --list --json | jq -c '[.[].python]') | tee --append $GITHUB_OUTPUT
          echo libcst-python-version=$(uv run noxfile.py -s codemod --list --json | jq -rc '[.[].python].[0]') | tee --append $GITHUB_OUTPUT
          echo misc-checks-python-version=$(uv run noxfile.py -s test --list --json | jq -rc '[.[].python].[0]') | tee --append $GITHUB_OUTPUT
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          path: ~/.cache/pip

      - name: Run pre-commit
        id: pre-commit
        uses: pre-commit/action@v3.0.1

  docs:
    # unlike the other workflows, we explicitly use the same version as
    # readthedocs (see .readthedocs.yml) here for consistency
    runs-on: ubuntu-24.04
    needs:
      - lock-dependencies
      - lint
    steps:
      - uses: actions/checkout@v4

      - name: Set up environment
        id: setup-env
        uses: ./.github/actions/setup-env
        with:
          python-version: 3.8
          uv-version: ${{ env.USE_UV_VERSION }}

      - name: Run sphinx-build
        run: uv run noxfile.py --force-python ${{ steps.setup-env.outputs.python-version }} -s docs -- --keep-going -W -w $GITHUB_STEP_SUMMARY

  pyright:
    runs-on: ubuntu-latest
    needs:
      - lock-dependencies
      - determine-python-versions
      - lint
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.determine-python-versions.outputs.test-python-versions) }}
        experimental: [false]
      fail-fast: false
    continue-on-error: ${{ matrix.experimental }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up environment
        id: setup-env
        uses: ./.github/actions/setup-env
        with:
          python-version: ${{ matrix.python-version }}
          uv-version: ${{ env.USE_UV_VERSION }}

      - name: Install dependencies
        run: uv run noxfile.py -s pyright --no-venv --install-only --force-python ${{ steps.setup-env.outputs.python-version }}

      - name: Add .venv/bin to PATH
        run: dirname "$(uv python find)" >> $GITHUB_PATH

      - name: Set pyright version
        id: pyright-version
        run: |
          PYRIGHT_VERSION="$(uv run python -c 'import pyright; print(pyright.__pyright_version__)')"
          echo "pyright_version=$PYRIGHT_VERSION" >> $GITHUB_OUTPUT

      - name: Run pyright (Linux)
        uses: jakebailey/pyright-action@v2.2.1
        id: pyright-linux
        with:
          version: ${{ steps.pyright-version.outputs.pyright_version }}
          python-version: ${{ steps.setup-env.outputs.python-version }}
          python-platform: "Linux"
          annotate: ${{ matrix.python-version == '3.8' }} # only add comments for one version
          warnings: true

      - name: Run pyright (Windows)
        uses: jakebailey/pyright-action@v2.2.1
        if: always() && (steps.pyright-linux.outcome == 'success' || steps.pyright-linux.outcome == 'failure')
        with:
          version: ${{ steps.pyright-version.outputs.pyright_version }}
          python-version: ${{ steps.setup-env.outputs.python-version }}
          python-platform: "Windows"
          annotate: false # only add comments for one platform (see above)
          warnings: true

  misc:
    runs-on: ubuntu-latest
    needs:
      - determine-python-versions
      - lock-dependencies
      - lint
    steps:
      - uses: actions/checkout@v4

      - name: Set up environment
        id: setup
        uses: ./.github/actions/setup-env
        with:
          python-version: ${{ needs.determine-python-versions.outputs.misc-checks-python-version }}
          uv-version: ${{ env.USE_UV_VERSION }}

      - name: Run slotscheck
        if: (success() || failure()) && steps.setup.outcome == 'success'
        run: uv run noxfile.py -s slotscheck

      - name: Try building package
        if: (success() || failure()) && steps.setup.outcome == 'success'
        run: |
          uv run noxfile.py -s build
          ls -la dist/

      - name: Check the built package
        run: |
          uvx twine~=6.1 check --strict dist/*

  codemod:
    runs-on: ubuntu-latest
    needs:
      - determine-python-versions
      - lock-dependencies
      - lint
    steps:
      - uses: actions/checkout@v4

      - name: Set up environment
        id: setup
        uses: ./.github/actions/setup-env
        with:
          python-version: ${{ needs.determine-python-versions.outputs.libcst-python-version }}
          uv-version: ${{ env.USE_UV_VERSION }}
      # run the libcst parsers and check for changes
      - name: libcst codemod
        run: |
          uv run noxfile.py -s codemod -- run-all
          if [ -n "$(git status --porcelain)" ]; then
            echo "::error::Please run 'uv run nox -s codemod -- run-all' locally and commit the changes." >&2;
            echo "::group::git diff"
            git diff
            echo "::endgroup::"
            exit 1;
          else
            exit 0;
          fi

  pytest:
    runs-on: ${{ matrix.os }}
    needs:
      - determine-python-versions
      - lock-dependencies
      - lint
    strategy:
      matrix:
        os: ["windows-latest", "ubuntu-latest", "macos-latest"]
        python-version: ${{ fromJson(needs.determine-python-versions.outputs.test-python-versions) }}
        experimental: [false]
      fail-fast: true
    continue-on-error: ${{ matrix.experimental }}

    env:
      GITHUB_STEP_SUMMARY_HEADER: "<details><summary>#name#</summary>\n<pre>"
      GITHUB_STEP_SUMMARY_FOOTER: "</pre></details>\n"

    steps:
      - uses: actions/checkout@v4

      - name: Set up environment
        id: setup-env
        uses: ./.github/actions/setup-env
        with:
          uv-version: ${{ env.USE_UV_VERSION }}
          python-version: ${{ matrix.python-version }}

      - name: Install nox environment
        run: uv run noxfile.py -s test --install-only --force-python ${{ steps.setup-env.outputs.python-version }}

      - name: Run pytest
        id: run_tests
        # use non-utc timezone, to test time/date-dependent features properly
        env:
          TZ: "America/New_York"
        run: |
          echo "$GITHUB_STEP_SUMMARY_HEADER" | sed "s/#name#/Test Summary/" >> $GITHUB_STEP_SUMMARY
          uv run noxfile.py --force-python ${{ steps.setup-env.outputs.python-version }} -s test -- --color=no --cov-report= | tee -a $GITHUB_STEP_SUMMARY
          echo "$GITHUB_STEP_SUMMARY_FOOTER" >> $GITHUB_STEP_SUMMARY

      - name: Print Coverage Output
        if: always() && (steps.run_tests.outcome == 'success' || steps.run_tests.outcome == 'failure')
        env:
          UV_NO_SYNC: 0
        run: |
          echo "$GITHUB_STEP_SUMMARY_HEADER" | sed "s/#name#/Coverage Summary/" >> $GITHUB_STEP_SUMMARY
          uv run --no-default-groups --group test coverage report | tee -a $GITHUB_STEP_SUMMARY
          echo "$GITHUB_STEP_SUMMARY_FOOTER" >> $GITHUB_STEP_SUMMARY

  # thanks to aiohttp for this part of the workflow
  check: # This job does nothing and is only used for the branch protection
    if: always()
    needs:
      - lint
      - docs
      - pyright
      - misc
      - codemod
      - pytest

    runs-on: ubuntu-latest

    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@v1.2.2
        with:
          jobs: ${{ toJSON(needs) }}
