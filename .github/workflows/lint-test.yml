# SPDX-License-Identifier: MIT

name: Lint & Test

on:
  push:
    branches:
      - "master"
      - "v[0-9]+.[0-9]+.x"  # matches to backport branches, e.g. v3.6.x
      - "run-ci/**"
    tags:
      - "*"
  pull_request:
  merge_group:
    types: [checks_requested]

permissions: read-all

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  GITHUB_STEP_SUMMARY_HEADER: "<details><summary>#name#</summary>\n<pre>"
  GITHUB_STEP_SUMMARY_FOOTER: "</pre></details>\n"

jobs:
  lock-dependencies:
    # The only purpose of this is to create a lockfile, which will be cached
    # to be used with subsequent jobs.
    # This provides somewhat of a middle ground and avoids having each job lock dependencies on its own,
    # while still not needing to commit a lockfile to the repo, which is discouraged for libraries as per
    # https://pdm-project.org/en/latest/usage/lockfile/
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

    # Instead of setup-env, we call the cache-pdm action here directly.
    # This avoids having to install PDM, only to find out the cache is already up to date sometimes.
      - name: Configure cache
        uses: ./.github/actions/cache-pdm
        with:
          env-already-initialized: false

  # Used to determine which python versions to test against.
  # noxfile.py is the source of truth, which in turn draws from
  # pyproject.toml's `project.requires-python` and `project.classifiers`.
  python-versions:
    runs-on: ubuntu-latest
    outputs:
      min-python: ${{ steps.set-matrix.outputs.min-python }}
      docs: ${{ steps.set-matrix.outputs.docs }}
      libcst: ${{ steps.set-matrix.outputs.libcst }}
      pyright-sessions: ${{ steps.set-matrix.outputs.pyright-sessions }}
      test-sessions: ${{ steps.set-matrix.outputs.test-sessions }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up environment
        uses: ./.github/actions/setup-env
        with:
          python-version: 3.8

      - name: Determine Python versions to test and lint against
        id: set-matrix
        # raw values (without a list) need the raw flag in order to not print quotes
        # lists do not need the raw flag, as we parse them with fromJSON() later on
        run: |
          echo min-python=$(nox -s test --list --json | jq -rc '[.[].python][0]') | tee --append $GITHUB_OUTPUT
          echo docs=$(nox -s docs --list --json | jq -rc '.[].python') | tee --append $GITHUB_OUTPUT
          echo libcst=$(nox -s codemod --list --json | jq -rc '[.[].python][0]') | tee --append $GITHUB_OUTPUT
          echo test-sessions=$(nox -s test --list --json | jq -c '[.[] | { python: .python, name: .session, extras: .call_spec.execution_group.extras, experimental: (.call_spec.execution_group.experimental == true) }]') | tee --append $GITHUB_OUTPUT
          echo pyright-sessions=$(nox -s pyright --list --json | jq -c '[.[] | {python: .python, name: .session, paths: .call_spec.execution_group.pyright_paths, experimental: (.call_spec.execution_group.experimental == true) }]') | tee --append $GITHUB_OUTPUT

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          path: ~/.cache/pip

      - name: Run pre-commit
        id: pre-commit
        uses: pre-commit/action@v3.0.1
        env:
          RUFF_OUTPUT_FORMAT: github

  docs:
    # unlike the other workflows, we explicitly use the same version as
    # readthedocs (see .readthedocs.yml) here for consistency
    runs-on: ubuntu-24.04
    needs:
      - python-versions
      - lock-dependencies
      - lint
    steps:
      - uses: actions/checkout@v4

      - name: Set up environment
        id: setup-env
        uses: ./.github/actions/setup-env
        with:
          python-version: ${{ needs.python-versions.outputs.docs }}

      - name: Run sphinx-build
        run: nox -s docs -- --keep-going -W -w $GITHUB_STEP_SUMMARY

  pyright:
    runs-on: ubuntu-latest
    needs:
      - python-versions
      - lock-dependencies
      - lint
    strategy:
      matrix:
        # TODO: add 3.14 once we switch to uv
        session: ${{ fromJson(needs.python-versions.outputs.pyright-sessions) }}
      fail-fast: false
    continue-on-error: ${{ matrix.session.experimental }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up environment
        id: setup-env
        uses: ./.github/actions/setup-env
        with:
          python-version: ${{ matrix.session.python }}

      - name: Add .venv/bin to PATH
        id: venv-bin
        run: |
          pdm venv create
          dirname "$(pdm info --python)" >> $GITHUB_PATH
          echo python="$(pdm info --python)" >> $GITHUB_OUTPUT

      - name: Install dependencies
        # `--no-venv` to install in the main pdm venv instead of nox's pyright-specific one
        # because nox uses pdm internally to install, this means that the venv that is used is
        # the one that pdm would create in project: `.venv`
        # python is NOT forced here because the session name is explicit
        env:
          NOXSESSION: ${{ matrix.session.name }}
          NOX_DEFAULT_VENV_BACKEND: "none"
          ## needed to install specific dependencies
          ## used internally when nox calls pip to install a dependency in the venv
          PIP_PYTHON: ${{ steps.venv-bin.outputs.python }}
        run: |
          nox --install-only

      - name: Set pyright version
        id: pyright-version
        run: |
          echo "pyright-version=$(${{steps.venv-bin.outputs.python}} -c 'import pyright; print(pyright.__pyright_version__)')" >> $GITHUB_OUTPUT

      - name: Run pyright (Linux)
        uses: jakebailey/pyright-action@v2.2.1
        id: pyright-linux
        with:
          version: ${{ steps.pyright-version.outputs.pyright-version }}
          python-version: ${{ steps.setup-env.outputs.python-version }}
          python-platform: "Linux"
          annotate: ${{ matrix.session.python == needs.python-versions.outputs.min-python }} # only add comments for one version
          warnings: true
          extra-args: ${{join(matrix.session.paths, ' ')}}

      - name: Run pyright (Windows)
        uses: jakebailey/pyright-action@v2.2.1
        if: always() && (steps.pyright-linux.outcome == 'success' || steps.pyright-linux.outcome == 'failure')
        with:
          version: ${{ steps.pyright-version.outputs.pyright-version }}
          python-version: ${{ steps.setup-env.outputs.python-version }}
          python-platform: "Windows"
          annotate: false # only add comments for one platform (see above)
          warnings: true
          extra-args: ${{join(matrix.session.paths, ' ')}}

  misc:
    runs-on: ubuntu-latest
    needs:
      - python-versions
      - lock-dependencies
      - lint
    steps:
      - uses: actions/checkout@v4

      - name: Set up environment
        id: setup
        uses: ./.github/actions/setup-env
        with:
          python-version: ${{ needs.python-versions.outputs.min-python }}

      - name: Run slotscheck
        if: (success() || failure()) && steps.setup.outcome == 'success'
        run: |
          nox -s slotscheck

      - name: Run check-manifest
        if: (success() || failure()) && steps.setup.outcome == 'success'
        run: nox -s check-manifest

      # This only runs if the previous steps were successful, no point in running it otherwise
      - name: Try building package
        run: |
          pdm install -dG build

          pdm run python -m build
          ls -la dist/

      - name: Check README.md renders properly on PyPI
        run: |
          pdm run twine check --strict dist/*

  codemod:
    runs-on: ubuntu-latest
    needs:
      - python-versions
      - lock-dependencies
      - lint
    steps:
      - uses: actions/checkout@v4

      - name: Set up environment
        id: setup
        uses: ./.github/actions/setup-env
        with:
          python-version: ${{ needs.python-versions.outputs.libcst }}

      # run the libcst parsers and check for changes
      - name: libcst codemod
        run: |
          nox -s codemod -- run-all

      - name: Check for changes by libcst
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "::error::Please run 'nox -s codemod -- run-all' locally and commit the changes." >&2;
            echo "$GITHUB_STEP_SUMMARY_HEADER" | sed "s/#name#/LibCST Codemod/" >> $GITHUB_STEP_SUMMARY
            echo "The libcst codemod made changes to the codebase. Please run 'nox -s codemod -- run-all' locally and commit the changes." >> $GITHUB_STEP_SUMMARY
            echo "::group::git diff"
            git diff |& tee -a $GITHUB_STEP_SUMMARY
            echo "::endgroup::"
            echo "$GITHUB_STEP_SUMMARY_FOOTER" >> $GITHUB_STEP_SUMMARY
            exit 1;
          else
            exit 0;
          fi

  pytest:
    runs-on: ${{ matrix.os }}
    needs:
      - python-versions
      - lock-dependencies
      - lint
    strategy:
      matrix:
        os: ["windows-latest", "ubuntu-latest", "macos-latest"]
        # TODO: add 3.14 once we switch to uv
        session: ${{ fromJson(needs.python-versions.outputs.test-sessions) }}
      fail-fast: true
    continue-on-error: ${{ matrix.session.experimental }}
    env:
      NOXSESSION: ${{ matrix.session.name }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up environment
        id: setup-env
        uses: ./.github/actions/setup-env
        with:
          python-version: ${{ matrix.session.python }}

      - name: Install nox environment
        run: |
          nox --install-only

      - name: Run pytest
        id: run_tests
        # use non-utc timezone, to test time/date-dependent features properly
        env:
          TZ: "America/New_York"
        run: |
          echo "$GITHUB_STEP_SUMMARY_HEADER" | sed "s/#name#/Test Summary/" >> $GITHUB_STEP_SUMMARY
          nox --no-install -- --color=no --cov-report= | tee -a $GITHUB_STEP_SUMMARY
          echo "$GITHUB_STEP_SUMMARY_FOOTER" >> $GITHUB_STEP_SUMMARY

      - name: Print Coverage Output
        if: always() && (steps.run_tests.outcome == 'success' || steps.run_tests.outcome == 'failure')
        env:
          NOXSESSION: coverage
        run: |
          echo "$GITHUB_STEP_SUMMARY_HEADER" | sed "s/#name#/Coverage Summary/" >> $GITHUB_STEP_SUMMARY
          nox -- report | tee -a $GITHUB_STEP_SUMMARY
          echo "$GITHUB_STEP_SUMMARY_FOOTER" >> $GITHUB_STEP_SUMMARY

  # thanks to aiohttp for this part of the workflow
  check:  # This job does nothing and is only used for the branch protection
    if: always()
    needs:
      - lint
      - docs
      - pyright
      - misc
      - codemod
      - pytest

    runs-on: ubuntu-latest

    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@v1.2.2
        with:
          jobs: ${{ toJSON(needs) }}
