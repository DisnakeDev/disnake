name: Lint & Test

on: [push, pull_request]

permissions:
  read-all

defaults:
  run:
    shell: bash

jobs:
  lint:
    # Thanks to black for this rule
    # We want to run on external PRs, but not on our own internal PRs as they'll be run
    # by the push to the branch. Without this if check, checks are duplicated since
    # internal PRs match both the push and pull_request events.
    if:
      github.event_name == 'push' || github.event.pull_request.head.repo.full_name !=
      github.repository
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up environment
      uses: ./.github/actions/setup-env
      with:
        python-version: 3.8
        nox-setup: "dev tools"

    - name: Run pre-commit
      id: pre-commit
      uses: pre-commit/action@v2.0.3
      env:
        SKIP: 'flake8'

    # Run flake8 and have it format the linting errors in the format of
    # the GitHub Workflow command to register error annotations. This
    # means that our flake8 output is automatically added as an error
    # annotation to both the run result and in the "Files" tab of a
    # pull request.
    #
    # Format used:
    # ::error file={filename},line={line},col={col}::{message}
    - name: Run flake8
      id: flake8
      if: always() && (steps.pre-commit.outcome == 'success' || steps.pre-commit.outcome == 'failure')
      run: "flake8 \
      --format='::error file=%(path)s,line=%(row)d,col=%(col)d::\
      [flake8] %(code)s: %(text)s'"

  docs:
    # We want to run on external PRs, but not on our own internal PRs as they'll be run
    # by the push to the branch. Without this if check, checks are duplicated since
    # internal PRs match both the push and pull_request events.
    if:
      github.event_name == 'push' || github.event.pull_request.head.repo.full_name !=
      github.repository
    # unlike the other workflows, we are using version 20.04 here as
    # readthedocs uses 20.04 for building our docs, and we want to be explicit
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3

    - name: Set up environment
      uses: ./.github/actions/setup-env
      with:
        python-version: 3.8
        nox-setup: "docs"

    - name: Run sphinx-build
      run: nox -s docs -- --keep-going -W -w $GITHUB_STEP_SUMMARY

  pyright:
    # We want to run on external PRs, but not on our own internal PRs as they'll be run
    # by the push to the branch. Without this if check, checks are duplicated since
    # internal PRs match both the push and pull_request events.
    if:
      github.event_name == 'push' || github.event.pull_request.head.repo.full_name !=
      github.repository
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
      fail-fast: false
    steps:
    - uses: actions/checkout@v3

    - name: Set up environment
      uses: ./.github/actions/setup-env
      with:
        python-version: ${{ matrix.python-version }}
        nox-setup: "*"

    - name: Set pyright version
      run: |
        PYRIGHT_VERSION="$(python -c 'import pyright; print(pyright.__pyright_version__)')"
        echo "PYRIGHT_VERSION=$PYRIGHT_VERSION" >> $GITHUB_ENV

    - name: Run pyright (Linux)
      uses: jakebailey/pyright-action@v1.0.3
      with:
        version: ${{ env.PYRIGHT_VERSION }}
        python-version: ${{ matrix.python-version }}
        python-platform: "Linux"
        no-comments: ${{ matrix.python-version != '3.8' }}  # only add comments for one version
        warnings: true

    - name: Run pyright (Windows)
      uses: jakebailey/pyright-action@v1.0.3
      if: ${{ success() || failure() }}  # run regardless of previous step's result
      with:
        version: ${{ env.PYRIGHT_VERSION }}
        python-version: ${{ matrix.python-version }}
        python-platform: "Windows"
        no-comments: true  # only add comments for one platform (see above)
        warnings: true


  slotscheck:
    # We want to run on external PRs, but not on our own internal PRs as they'll be run
    # by the push to the branch. Without this if check, checks are duplicated since
    # internal PRs match both the push and pull_request events.
    if:
      github.event_name == 'push' || github.event.pull_request.head.repo.full_name !=
      github.repository
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up environment
      uses: ./.github/actions/setup-env
      with:
        python-version: 3.8
        nox-setup: tools

    - name: Run slotscheck
      run: task slotscheck

  pytest:
    # Thanks to black for this rule
    # We want to run on external PRs, but not on our own internal PRs as they'll be run
    # by the push to the branch. Without this if check, checks are duplicated since
    # internal PRs match both the push and pull_request events.
    if:
      github.event_name == 'push' || github.event.pull_request.head.repo.full_name !=
      github.repository
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
        os: ["windows-latest", "ubuntu-latest", "macos-latest"]
      fail-fast: true

    runs-on: ${{ matrix.os }}

    env:
      GITHUB_STEP_SUMMARY_HEADER: "<details><summary>#name#</summary>\n<pre>"
      GITHUB_STEP_SUMMARY_FOOTER: "</pre></details>\n"

    steps:
    - uses: actions/checkout@v3

    - name: Set up environment
      uses: ./.github/actions/setup-env
      with:
        python-version: ${{ matrix.python-version }}
        dependencies: nox coveralls==3.3.1 coverage[toml]~=6.3.2

    - name: Test package install
      run: |
        python -m pip install .

    - name: Run pytest
      id: run_tests
      # use non-utc timezone, to test time/date-dependent features properly
      env:
        TZ: "America/New_York"
      run: |
        echo "$GITHUB_STEP_SUMMARY_HEADER" | sed "s/#name#/Test Summary/" >> $GITHUB_STEP_SUMMARY
        nox -s test-${{ matrix.python-version }} -- --color=no --cov-report= | tee -a $GITHUB_STEP_SUMMARY
        echo "$GITHUB_STEP_SUMMARY_FOOTER" >> $GITHUB_STEP_SUMMARY

    - name: Print Coverage Output
      if: always() && (steps.run_tests.outcome == 'success' || steps.run_tests.outcome == 'failure')
      run: |
        echo "$GITHUB_STEP_SUMMARY_HEADER" | sed "s/#name#/Coverage Summary/" >> $GITHUB_STEP_SUMMARY
        python -m coverage report | tee -a $GITHUB_STEP_SUMMARY
        echo "$GITHUB_STEP_SUMMARY_FOOTER" >> $GITHUB_STEP_SUMMARY


    # This step will publish the coverage reports to coveralls.io and
    # print a "job" link in the output of the GitHub Action
    - name: Publish coverage report to coveralls.io
      # upload coverage even if a test run failed
      # this is a test, and may be removed in the future
      if: always() && (steps.run_tests.outcome == 'success' || steps.run_tests.outcome == 'failure')
      # important that we don't fail the workflow when coveralls is down
      continue-on-error: true
      env:
        COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COVERALLS_FLAG_NAME: coverage-${{ runner.os }}-python-${{ matrix.python-version }}
        COVERALLS_PARALLEL: true
        COVERALLS_SERVICE_NAME: github
      run: python -m coveralls

  coveralls-finish:
    name: Indicate completion to coveralls.io
    runs-on: ubuntu-latest
    needs: pytest
    # we don't want to fail the workflow when coveralls is down
    continue-on-error: true
    # as long as the tests were ran, we want to send a finish to coveralls
    if: success() || failure()
    steps:
    - uses: actions/checkout@v3

    - name: Set up environment
      uses: ./.github/actions/setup-env
      with:
        python-version: 3.8
        cache-dependency-path: |
          .github/workflows/lint-test.yml
        dependencies: coveralls==3.3.1

    - name: Coveralls Finished
      continue-on-error: true
      env:
        COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COVERALLS_SERVICE_NAME: github
      run: |
        python3 -m coveralls --finish
