name: lint

on: [push, pull_request]

jobs:
  pre-commit:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
        cache: "pip"
        cache-dependency-path: |
          requirements_dev.txt
          requirements.txt
          setup.py

    - name: Install requirements
      run: python -m pip install -r requirements_dev.txt

    - name: Run pre-commit
      uses: pre-commit/action@v2.0.3


  pyright:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
      fail-fast: false
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
        cache: "pip"
        cache-dependency-path: |
          requirements_dev.txt
          requirements.txt
          setup.py

    - name: Install requirements
      run: python -m pip install -r requirements_dev.txt .[voice,docs,speed]

    - name: Set pyright version
      run: echo "PYRIGHT_VERSION=$(python -c 'import pyright; print(pyright.__pyright_version__)')" >> $GITHUB_ENV

    - name: Run pyright (Linux)
      uses: jakebailey/pyright-action@v1.0.3
      with:
        version: ${{ env.PYRIGHT_VERSION }}
        python-version: ${{ matrix.python-version }}
        python-platform: "Linux"
        no-comments: ${{ matrix.python-version != '3.8' }}  # only add comments for one version
        warnings: true

    - name: Run pyright (Windows)
      uses: jakebailey/pyright-action@v1.0.3
      if: ${{ success() || failure() }}  # run regardless of previous step's result
      with:
        version: ${{ env.PYRIGHT_VERSION }}
        python-version: ${{ matrix.python-version }}
        python-platform: "Windows"
        no-comments: true  # only add comments for one platform (see above)
        warnings: true


  slotscheck:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
        cache: "pip"
        cache-dependency-path: |
          requirements_dev.txt
          requirements.txt
          setup.py

    - name: Install requirements
      run: python -m pip install -r requirements.txt -r requirements_dev.txt

    - name: Run slotscheck
      run: task slotscheck
