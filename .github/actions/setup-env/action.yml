# SPDX-License-Identifier: MIT

name: Set up environment
description: .
inputs:
  python-version:
    description: The python version to install
    required: true
outputs:
  python-version:
    description: The python version that was installed.
    value: ${{ steps.python-version.outputs.python-version }}

runs:
  using: composite
  steps:
    - name: Set up pdm with python ${{ inputs.python-version }}
      id: setup-python
      uses: pdm-project/setup-pdm@v4
      with:
        python-version: ${{ inputs.python-version }}
        version: "2.20.1"  # last version to support python 3.8
        cache: false

    - name: Disable PDM version check
      shell: bash
      run: |
        pdm config check_update false

    - name: Ignore saved pythons
      shell: bash
      run: |
        echo "PDM_IGNORE_SAVED_PYTHON=1" >> $GITHUB_ENV

    - name: Update pip, wheel, setuptools
      shell: bash
      run: python -m pip install -U pip wheel setuptools

    # TODO: use `pdm run nox` instead?
    - name: Install nox
      shell: bash
      run: pip install nox

    - name: Set python version
      id: python-version
      shell: bash
      run: echo "python-version=$(python -c 'import sys; print(".".join(map(str,sys.version_info[:2])))')" >> $GITHUB_OUTPUT

    - name: Get metadata for cache
      id: get-cache-meta
      shell: bash
      run: |
        echo "date=$(date -u "+%Y%m%d")" >> $GITHUB_OUTPUT

    - name: Setup/Restore cache
      id: cache
      uses: actions/cache@v4
      with:
        path: |
          pdm.lock
        # cache lockfile for the current day, roughly
        key: pdm-${{ steps.get-cache-meta.outputs.date }}-${{ hashFiles('pyproject.toml') }}
        # pdm lockfiles should be platform-agnostic
        enableCrossOsArchive: true

    - if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      name: Lock all dependencies
      shell: bash
      run: |
        pdm lock -G:all  # create pdm.lock
