# SPDX-License-Identifier: MIT

name: Set up environment
description: .
inputs:
  python-version:
    description: The python version to install
    required: false
    default: '3.8'
  use-cached-uv-lock:
    description: Whether to download the uv lock cache.
    required: false
    default: 'true'
  update-uv-lock:
    description: Whether to update the uv lock file. Allows the cache to fail.
    required: false
    default: 'false'
  uv-resolution-strategy:
    description: The uv resolution strategy to use. See https://docs.astral.sh/uv/reference/environment/#uv_resolution for details.
    required: false
    default: 'highest'
outputs:
  python-version:
    description: The python version that was installed.
    value: ${{ steps.python-version.outputs.python-version }}

runs:
  using: composite
  steps:
    - name: Download uv lock
      uses: actions/cache/restore@v4
      if: ${{ inputs.use-cached-uv-lock != 'false' }}
      id: restore-uv-lock
      with:
        key: uv-lock-resolved-${{ inputs.uv-resolution-strategy }}
        path: uv.lock
        restore-keys: |
          uv-lock-resolved-${{ env.UV_RESOLUTION }}
        enableCrossOsArchive: true
        fail-on-cache-miss: ${{ inputs.update-uv-lock != 'true' }}

    - name: Set up uv with python ${{ inputs.python-version }}
      id: setup-python
      uses: astral-sh/setup-uv@v6
      with:
        python-version: ${{ inputs.python-version }}
        version: '0.8.14'
        enable-cache: true

    - name: Lock dependencies
      id: lock-uv-deps
      if: ${{ inputs.update-uv-lock }}
      shell: bash
      env:
        UV_LOCKED: 0
      run: uv lock --refresh

    - name: Set python version
      id: python-version
      shell: bash
      env:
        UV_VENV_CLEAR: 1
      run: |
        uv venv .venv
        echo "python-version=$($(uv python find) -c 'import sys; print(".".join(map(str,sys.version_info[:2])))')" >> $GITHUB_OUTPUT
