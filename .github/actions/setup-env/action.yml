# SPDX-License-Identifier: MIT

name: Set up environment
description: .
inputs:
  python-version:
    description: The python version to install
    required: true
  cache-dependency-path:
    description: The path(s) to use for pip caching, defaults to requirements + setup
    required: false
    default: |
      pyproject.toml
      poetry.lock
  dependencies:
    description: Other python dependencies to install
    required: false
  dependency-groups:
    description: |
      The dependencies to install using `poetry install`.
      Automatically installs nox as well.
      Use `*` to install all dependencies.
    required: false

runs:
  using: composite
  steps:
    - name: Install poetry
      shell: bash
      run: |
        pipx install poetry==1.2.0

    - name: Set up python ${{ inputs.python-version }}
      uses: actions/setup-python@v4.2.0
      id: setup_python
      with:
        python-version: ${{ inputs.python-version }}
        cache: "pip"
        cache-dependency-path: ${{ inputs.cache-dependency-path }}

    - name: Configure Poetry environment
      shell: bash
      run: |
        venv_path=~/.venv
        python -m venv $venv_path
        bin_dir="bin"
        if [ -n "$MSYSTEM" ]; then
          bin_dir="Scripts"
        fi

        echo "PATH=$venv_path/$bin_dir:$PATH" >> $GITHUB_ENV
        echo "VIRTUAL_ENV=$venv_path" >> $GITHUB_ENV

    - name: Install dependencies
      if: inputs.dependency-groups || inputs.dependencies
      env:
        DEPENDENCY_GROUPS: ${{ inputs.dependency-groups }}
        DEPS: ${{ inputs.dependencies }}
        POETRY_VIRTUALENVS_CREATE: false
      shell: bash
      run: |
        [ -n "$DEPENDENCY_GROUPS" ] && DEPS="$DEPS nox"
        python -m pip install $DEPS

        if [ "*" == "$DEPENDENCY_GROUPS" ]; then
          poetry install --all-extras --sync
        elif [ -n "$DEPENDENCY_GROUPS" ]; then
           poetry install --only $DEPENDENCY_GROUPS --sync
        fi
