# ==============================================================================
# GitHub Action: Advanced Python Environment Setup with UV Package Manager
# 
# Purpose: Automated Python environment setup for CI/CD pipelines and development
# Features: 
#   - Fast dependency resolution with UV package manager
#   - Multiple Python version support (3.9+)
#   - Intelligent caching for faster build times
#   - Nox testing tool integration
#   - Cross-platform compatibility (Windows, Linux, macOS)
#   - Advanced error handling and recovery
#   - Performance optimizations
#   - Security enhancements
# 
# Usage:
#   - uses: ./.github/actions/setup-environment
#     with:
#       python-version: '3.11'
#       use-cached-uv-lock: true
# ==============================================================================

# SPDX-License-Identifier: MIT

name: Set up Python Environment
description: Sets up Python environment with UV package manager and Nox testing tool

inputs:
  python-version:
    description: |
      Python version to install and use in the environment.
      Supported versions: '3.9', '3.10', '3.11', '3.12', '3.13'
      Default: '3.9' for maximum compatibility
    required: false
    default: '3.9'
    
  use-cached-uv-lock:
    description: |
      Whether to use cached uv.lock file for faster dependency resolution.
      Enable for faster CI builds, disable for clean dependency resolution.
      Recommended: true for most use cases
    required: false
    default: 'true'
    
  update-uv-lock:
    description: |
      Whether to update the uv.lock file (allows cache to fail).
      Use when you want to refresh dependencies despite having cache.
      Recommended: false for stable builds
    required: false
    default: 'false'
    
  uv-resolution-strategy:
    description: |
      UV dependency resolution strategy for handling version conflicts.
      Options: 'highest' (latest versions), 'lowest', 'minimal'
      Recommended: 'highest' for most projects
    required: false
    default: 'highest'

  enable-security-scan:
    description: |
      Whether to run security vulnerability scan on dependencies.
      Uses uv audit to check for known vulnerabilities.
      Recommended: true for production builds
    required: false
    default: 'false'

  install-dev-dependencies:
    description: |
      Whether to install development dependencies (testing, linting tools).
      Recommended: true for CI, false for production
    required: false
    default: 'true'

outputs:
  python-version:
    description: The actual Python version that was installed and configured
    value: ${{ steps.python-version.outputs.python-version }}
  uv-version:
    description: The UV version that was installed
    value: ${{ steps.setup-python.outputs.uv-version }}
  cache-hit:
    description: Whether UV lock cache was used
    value: ${{ steps.restore-uv-lock.outputs.cache-hit }}

runs:
  using: composite
  
  steps:
    - name: Download cached UV lock file
      uses: actions/cache/restore@0057852bfaa89a56745cba8c7296529d2fc39830
      if: ${{ inputs.use-cached-uv-lock != 'false' }}
      id: restore-uv-lock
      with:
        key: uv-lock-${{ github.workflow }}-${{ github.ref }}-${{ inputs.uv-resolution-strategy }}
        path: uv.lock
        restore-keys: |
          uv-lock-${{ github.workflow }}-${{ github.ref }}-${{ inputs.uv-resolution-strategy }}
          uv-lock-${{ github.workflow }}-
          uv-lock-
        enableCrossOsArchive: true
        fail-on-cache-miss: ${{ inputs.update-uv-lock != 'true' }}

    - name: Set up UV with Python version
      id: setup-python
      uses: astral-sh/setup-uv@eb1897b8dc4b5d5bfe39a428a8f2304605e0983c
      with:
        version: '0.9.2'
        enable-cache: true
        cache-dependency-path: |
          pyproject.toml
          uv.lock
        python-version: ${{ inputs.python-version }}

    - name: Install Python
      shell: bash
      env:
        UV_PYTHON_DOWNLOADS: automatic
        PYTHON_VERSION: ${{ inputs.python-version }}
      run: |
        echo "Installing Python version: $PYTHON_VERSION"
        
        # Check if Python is already installed
        if command -v python &> /dev/null; then
          CURRENT_VERSION=$(python -c "import sys; print('.'.join(map(str, sys.version_info[:2])))")
          if [ "$CURRENT_VERSION" = "$PYTHON_VERSION" ]; then
            echo "Python $PYTHON_VERSION already installed"
            exit 0
          fi
        fi
        
        # Install the requested version
        uv python install $PYTHON_VERSION
        
        # Verify installation
        INSTALLED_VERSION=$(uv run python -c "import sys; print('.'.join(map(str, sys.version_info[:2])))")
        if [ "$INSTALLED_VERSION" = "$PYTHON_VERSION" ]; then
          echo "Python $PYTHON_VERSION installed successfully"
        else
          echo "Failed to install Python $PYTHON_VERSION. Got version: $INSTALLED_VERSION"
          exit 1
        fi

    - name: Add Python to PATH (Windows)
      shell: bash
      if: ${{ runner.os == 'Windows' }}
      run: |
        echo "Adding Python to PATH on Windows"
        echo 'C:\Users\runneradmin\.local\bin' >> $GITHUB_PATH
        echo "Python added to PATH"

    - name: Install Nox testing tool
      shell: bash
      run: |
        echo "Installing Nox testing tool"
        uv tool install nox
        echo "Nox installed successfully"

    - name: Update UV lock file
      id: lock-uv-deps
      if: ${{ inputs.update-uv-lock }}
      shell: bash
      env:
        UV_LOCKED: 0
      run: |
        echo "Updating UV lock file with resolution strategy: ${{ inputs.uv-resolution-strategy }}"
        
        # Backup existing lock file
        if [ -f "uv.lock" ]; then
          cp uv.lock uv.lock.backup
          echo "Backed up existing uv.lock"
        fi
        
        # Update lock file
        uv lock --refresh --resolution ${{ inputs.uv-resolution-strategy }}
        
        # Verify the update was successful
        if [ -f "uv.lock" ]; then
          echo "UV lock file updated successfully"
          
          # Show what changed
          if [ -f "uv.lock.backup" ]; then
            echo "Changes in dependencies:"
            uv lock --diff uv.lock.backup || true
            rm uv.lock.backup
          fi
        else
          echo "Failed to update UV lock file"
          exit 1
        fi

    - name: Security audit of dependencies
      if: ${{ inputs.enable-security-scan }}
      shell: bash
      run: |
        echo "Running security audit..."
        uv audit
        
        if [ $? -eq 0 ]; then
          echo "No known vulnerabilities found"
        else
          echo "Security vulnerabilities detected. Check the report above."
        fi

    - name: Install development dependencies
      if: ${{ inputs.install-dev-dependencies }}
      shell: bash
      run: |
        echo "Installing development dependencies..."
        
        # Check if pyproject.toml exists and has dev dependencies
        if [ -f "pyproject.toml" ] && grep -q "dev-dependencies" pyproject.toml; then
          uv sync --dev
          echo "Development dependencies installed"
        else
          echo "No development dependencies found in pyproject.toml"
        fi

    - name: Set Python version output
      id: python-version
      shell: bash
      env:
        UV_VENV_CLEAR: 1
      run: |
        echo "Creating virtual environment and detecting Python version"
        uv venv .venv
        
        DETECTED_VERSION=$(uv run python -c 'import sys; print(".".join(map(str,sys.version_info[:2])))')
        DETECTED_FULL_VERSION=$(uv run python -c 'import sys; print(sys.version.split()[0])')
        
        echo "Detected Python version: $DETECTED_VERSION (Full: $DETECTED_FULL_VERSION)"
        echo "python-version=$DETECTED_VERSION" >> $GITHUB_OUTPUT
        echo "python-full-version=$DETECTED_FULL_VERSION" >> $GITHUB_OUTPUT
        
    - name: Verify environment setup
      shell: bash
      run: |
        echo ""
        echo "ENVIRONMENT SETUP COMPLETE"
        echo "================================"
        echo "SETUP SUMMARY:"
        echo "Python Version: ${{ steps.python-version.outputs.python-version }}"
        echo "Python Full Version: ${{ steps.python-version.outputs.python-full-version }}"
        echo "UV Version: 0.9.2"
        echo "Nox: Installed"
        echo "OS: ${{ runner.os }}"
        echo "Cache Used: ${{ inputs.use-cached-uv-lock }}"
        echo "Cache Hit: ${{ steps.restore-uv-lock.outputs.cache-hit }}"
        echo "Security Scan: ${{ inputs.enable-security-scan }}"
        echo "Dev Dependencies: ${{ inputs.install-dev-dependencies }}"
        echo "================================"
        echo ""
        
        # Final verification
        echo "Final verification..."
        uv run python -c "import sys; print(f'Python {sys.version} ready!')" && \
        uv run nox --version && \
        echo "All systems operational!"